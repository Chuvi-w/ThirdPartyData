FUNCTION(PrintVar Var)
	message("${Var}=\"${${Var}}\"")
endfunction()

function(ListCompilerFlags)
	PrintVar(CMAKE_CXX_FLAGS)
	PrintVar(CMAKE_CXX_FLAGS_DEBUG)
	PrintVar(CMAKE_CXX_FLAGS_RELEASE)
	PrintVar(CMAKE_CXX_FLAGS_MINSIZEREL)
	PrintVar(CMAKE_CXX_FLAGS_RELWITHDEBINFO)

	PrintVar(CMAKE_EXE_LINKER_FLAGS)
	PrintVar(CMAKE_SHARED_LINKER_FLAGS)
	PrintVar(CMAKE_MODULE_LINKER_FLAGS)
endfunction()

macro(FixStaticLinking_)
if(MSVC)
	foreach(flag
			CMAKE_CXX_FLAGS CMAKE_CXX_FLAGS_DEBUG CMAKE_CXX_FLAGS_RELEASE
			CMAKE_CXX_FLAGS_MINSIZEREL CMAKE_CXX_FLAGS_RELWITHDEBINFO
			CMAKE_C_FLAGS CMAKE_C_FLAGS_DEBUG CMAKE_C_FLAGS_RELEASE
			CMAKE_C_FLAGS_MINSIZEREL CMAKE_C_FLAGS_RELWITHDEBINFO
			)
		if(${flag} MATCHES "/MD")
			string(REGEX REPLACE "/MD" "/MT" ${flag} "${${flag}}")
		endif()
	endforeach()
endif()
endmacro()

macro(FixMPFlag_)
	if(MSVC_VERSION GREATER 1500 AND ${CMAKE_VERSION} VERSION_GREATER "2.8.6")
			include(ProcessorCount)
			ProcessorCount(N)
			if(NOT N EQUAL 0)
				SET(CMAKE_C_FLAGS   "${CMAKE_C_FLAGS} /MP${N}")
				SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP${N}")
			endif()
	endif()
endmacro()

function(FixExePostfix Target)
if(FALSE)
	get_property(TargType TARGET ${Target} PROPERTY TYPE)
	if("${TargType}" STREQUAL "EXECUTABLE" AND CMAKE_CONFIGURATION_TYPES)
		set_target_properties(${Target} PROPERTIES DEBUG_POSTFIX ${CMAKE_DEBUG_POSTFIX})
		set_target_properties(${Target} PROPERTIES RELEASE_POSTFIX ${CMAKE_RELEASE_POSTFIX})
		set_target_properties(${Target} PROPERTIES MINSIZEREL_POSTFIX ${CMAKE_MINSIZEREL_POSTFIX})
		set_target_properties(${Target} PROPERTIES RELWITHDEBINFO_POSTFIX ${CMAKE_RELWITHDEBINFO_POSTFIX})
	endif()
endif()
endfunction()


macro(PrintDirs var)
get_property(${var}_LIBRARY_OUTPUT_DIRECTORY TARGET ${var} PROPERTY LIBRARY_OUTPUT_DIRECTORY)
message(${var}_LIBRARY_OUTPUT_DIRECTORY=${${var}_LIBRARY_OUTPUT_DIRECTORY})
message(${var}_COMPILE_PDB_OUTPUT_DIRECTORY=${COMPILE_PDB_OUTPUT_DIRECTORY})
endmacro()

function(GetBuildToolsStr OutStr)
if(MSVC)
	 set(${OutStr} "${CMAKE_VS_PLATFORM_TOOLSET}/${CMAKE_VS_PLATFORM_NAME}" PARENT_SCOPE)
endif()
endfunction()

macro(SetOutputDirs0)
	
	GetBuildToolsStr(BuildToolsOutStr)
	if(CMAKE_CONFIGURATION_TYPES)
		if(FALSE)
			set(CMAKE_DEBUG_POSTFIX "_${PLATFORM_TYPE}_d")
			set(CMAKE_RELEASE_POSTFIX "_${PLATFORM_TYPE}")
			set(CMAKE_MINSIZEREL_POSTFIX "_${PLATFORM_TYPE}_min")
			set(CMAKE_RELWITHDEBINFO_POSTFIX "_${PLATFORM_TYPE}_rd")
		else()
			#set(CMAKE_DEBUG_POSTFIX "_${PLATFORM_TYPE}_d")
			#set(CMAKE_RELEASE_POSTFIX "_${PLATFORM_TYPE}")
			#set(CMAKE_MINSIZEREL_POSTFIX "_${PLATFORM_TYPE}_min")
			#set(CMAKE_RELWITHDEBINFO_POSTFIX "_${PLATFORM_TYPE}_rd")
		endif()
		foreach(cfg ${CMAKE_CONFIGURATION_TYPES})
			string(TOUPPER ${cfg} cfgup)
			if(FALSE)
				set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${cfgup} ${CMAKE_BINARY_DIR}/_Output/Lib)
				set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${cfgup} ${CMAKE_BINARY_DIR}/_Output/Lib)
				set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${cfgup} ${CMAKE_BINARY_DIR}/_Output/Bin)
			else()
				set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_${cfgup} ${CMAKE_BINARY_DIR}/_Output/Lib/${BuildToolsOutStr}/${cfg})
				set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_${cfgup} ${CMAKE_BINARY_DIR}/_Output/Lib/${BuildToolsOutStr}/${cfg})
				set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_${cfgup} ${CMAKE_BINARY_DIR}/_Output/Bin/${BuildToolsOutStr}/${cfg})
			endif()
			
		endforeach()
	else()
			set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/_Output/Lib/${BuildToolsOutStr})
			set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/_Output/Lib/${BuildToolsOutStr})
			set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/_Output/Bin/${BuildToolsOutStr})	
	endif()
endmacro()

macro(SetOutputDirs)	
	GetBuildToolsStr(BuildToolsOutStr)
	set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/_Output/Lib/${BuildToolsOutStr}/$<CONFIG>)
	set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/_Output/Lib/${BuildToolsOutStr}/$<CONFIG>)
	set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/_Output/Bin/${BuildToolsOutStr}/$<CONFIG>)	
endmacro()

macro(SetInstallPath)
	GetBuildToolsStr(BuildToolsOutStr)
	set(CMAKE_INSTALL_BINDIR ${CMAKE_INSTALL_PREFIX}/bin/${BuildToolsOutStr}/$<CONFIG>)
	set(CMAKE_INSTALL_LIBDIR ${CMAKE_INSTALL_PREFIX}/lib/${BuildToolsOutStr}/$<CONFIG>)
	#set(CMAKE_INSTALL_LIBDIR ${CMAKE_INSTALL_PREFIX}/lib/${BuildToolsOutStr}/$<CONFIG>)
endmacro()
macro(DisableSAFESEH)
	if(MSVC)
		set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /SAFESEH:NO")
		set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /SAFESEH:NO")
		set(CMAKE_MODULE_LINKER_FLAGS "${CMAKE_MODULE_LINKER_FLAGS} /SAFESEH:NO")
	endif()
endmacro()


function(AddSubdirs)
	FILE(GLOB DirChilds RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR}/*)
	foreach(DirChild ${DirChilds})
		set(ChildPath ${CMAKE_CURRENT_SOURCE_DIR}/${DirChild})		
		if(EXISTS "${ChildPath}/CMakeLists.txt")			
			file(RELATIVE_PATH TargetSubdirName ${CMAKE_SOURCE_DIR} ${CMAKE_CURRENT_SOURCE_DIR})
			#message("Add subdir ${DirChild}. TargetSubdirName= ${TargetSubdirName}")
			add_subdirectory(${DirChild})
		endif()
	endforeach()
endfunction()

function(AddSubdirsRecursive CurDir)
	file(TO_CMAKE_PATH "${CMAKE_BINARY_DIR}" CMAKE_BIN_DIR_CVAR)
	FILE(GLOB DirChilds RELATIVE ${CurDir} ${CurDir}/*)
	foreach(DirChild ${DirChilds})
		set(ChildPath ${CurDir}/${DirChild})
		file(TO_CMAKE_PATH "${ChildPath}" ChildPath_CVAR)
		if(IS_DIRECTORY ${ChildPath} AND NOT ChildPath_CVAR STREQUAL CMAKE_BIN_DIR_CVAR AND NOT EXISTS "${ChildPath}/CMakeCache.txt" )		
			if(EXISTS "${ChildPath}/CMakeLists.txt")			
				file(RELATIVE_PATH TargetSubdir ${CMAKE_SOURCE_DIR} ${ChildPath})
				add_subdirectory(${TargetSubdir})
			else()
				AddSubdirsRecursive(${ChildPath})
			endif()	
			
		endif()
	endforeach()
endfunction()

function(GetTargetsRecursive Targets CurDir )
	get_property(SubdirsList DIRECTORY ${CurDir} PROPERTY SUBDIRECTORIES)
	foreach(SubDir ${SubdirsList})
		GetTargetsRecursive(${Targets} ${SubDir})
		get_property(DirTargets DIRECTORY ${SubDir} PROPERTY BUILDSYSTEM_TARGETS)
		list(APPEND ${Targets} ${DirTargets})
	endforeach()
	set(${Targets} ${${Targets}} PARENT_SCOPE)
endfunction()

function(SetTargetsIDESubdits Targets)
	foreach(Target ${${Targets}})
			get_property(TargType TARGET ${Target} PROPERTY TYPE)		
			if(
			"${TargType}" STREQUAL "EXECUTABLE" OR 
			"${TargType}" STREQUAL "STATIC_LIBRARY" OR 
			"${TargType}" STREQUAL "SHARED_LIBRARY"
			)
				FixExePostfix(${Target})
				get_property(TargSrc TARGET ${Target} PROPERTY SOURCE_DIR)
				file(RELATIVE_PATH TargetSubdirName ${CMAKE_SOURCE_DIR} ${TargSrc}/../)
				#set(TargetSubdirName "${TargetSubdirName}/${TargType}")
				get_target_property(TargFolder ${Target} FOLDER)
				#message("TargFold ${Target}=${TargFolder}")
				if(NOT "${TargetSubdirName}" STREQUAL "")
					if(TargFolder)
						SET_TARGET_PROPERTIES (${Target} PROPERTIES FOLDER ${TargetSubdirName}/${TargFolder})
					else()
					SET_TARGET_PROPERTIES (${Target} PROPERTIES FOLDER ${TargetSubdirName})
					endif()			
				endif()
			endif()
			
	endforeach()
endfunction()

SetInstallPath()
if(MSVC)
	set(MSVC_USE_STATIC_CRT ON)
	if(MSVC_USE_STATIC_CRT)
		FixStaticLinking_()
	endif()
	FixMPFlag_()
endif()