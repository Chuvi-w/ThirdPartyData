
cmake_minimum_required(VERSION 3.8)
add_library(asio src/asio.cpp)

if(WIN32)
	macro(get_WIN32_WINNT version)
		if(CMAKE_SYSTEM_VERSION)
			set(ver ${CMAKE_SYSTEM_VERSION})
			string(REGEX MATCH "^([0-9]+).([0-9])" ver ${ver})
			string(REGEX MATCH "^([0-9]+)" verMajor ${ver})
			# Check for Windows 10, b/c we'll need to convert to hex 'A'.
			if("${verMajor}" MATCHES "10")
				set(verMajor "A")
				string(REGEX REPLACE "^([0-9]+)" ${verMajor} ver ${ver})
			endif()
			# Remove all remaining '.' characters.
			string(REPLACE "." "" ver ${ver})
			# Prepend each digit with a zero.
			string(REGEX REPLACE "([0-9A-Z])" "0\\1" ver ${ver})
			set(${version} "0x${ver}")
		endif()
	endmacro()

	get_WIN32_WINNT(Win32Ver)
	message ("Win32Ver=${Win32Ver}")
	message ("CMAKE_SYSTEM_VERSION=${CMAKE_SYSTEM_VERSION}")
	target_compile_definitions(asio PUBLIC _WIN32_WINNT=${Win32Ver})
endif()

target_include_directories(asio PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
target_compile_definitions(asio PUBLIC ASIO_SEPARATE_COMPILATION ASIO_HAS_CO_AWAIT)
if(MSVC)
  target_compile_options(asio PUBLIC /await)
else()
  target_compile_options(asio PUBLIC -fcoroutines-ts)
endif()

if (TARGET OpenSSL::SSL AND TARGET OpenSSL::Crypto)
	add_library(asio_ssl src/asio_ssl.cpp)
	target_include_directories(asio_ssl PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
	target_link_libraries(asio_ssl OpenSSL::SSL OpenSSL::Crypto)
	target_compile_definitions(asio_ssl PUBLIC ASIO_SEPARATE_COMPILATION ASIO_HAS_CO_AWAIT)
	if(MSVC)
		target_compile_options(asio_ssl PUBLIC /await)
	else()
		target_compile_options(asio_ssl PUBLIC -fcoroutines-ts)
	endif()
	if(WIN32)
		target_compile_definitions(asio_ssl PUBLIC _WIN32_WINNT=${Win32Ver})
		target_link_libraries(asio_ssl Crypt32)
	endif()
endif()
